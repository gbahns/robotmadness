generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// =====================================================
// PHASE 1: CORE TABLES - Users, Games, Game Players
// =====================================================

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  username      String       @unique
  name          String?
  
  // Authentication fields
  password      String?      // Optional - for email/password auth
  image         String?      // Avatar URL
  emailVerified DateTime?    // For email verification
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // OAuth relations
  accounts      Account[]
  sessions      Session[]
  
  // Game relations
  hostedGames   Game[]       @relation("HostedGames")
  gamesPlayed   GamePlayer[]
  wonGames      Game[]       @relation("WonGames")
}

model Game {
  id       String @id @default(uuid())
  roomCode String @unique @default(cuid())
  
  // Basic game info
  name      String?
  hostId    String?
  host      User?   @relation("HostedGames", fields: [hostId], references: [id])
  
  // For now, store board/course as simple strings
  boardName   String?
  courseName  String?
  
  // Game settings
  maxPlayers Int     @default(8)
  isPrivate  Boolean @default(false)
  isPractice Boolean @default(false)
  
  // Game lifecycle
  startedAt  DateTime?
  endedAt    DateTime?
  
  // Results (populated when game ends)
  winnerId      String?
  winner        User?    @relation("WonGames", fields: [winnerId], references: [id])
  finalResults  Json?    // Array of {playerId, position, flags, finalDamage}
  totalDuration Int?     // Game duration in seconds
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  players      GamePlayer[]
  
  @@index([roomCode])
  @@index([hostId])
}

model GamePlayer {
  id String @id @default(uuid())
  
  // Foreign keys
  gameId String
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  // Player game info
  robotColor      String?
  startingDock    Int?     // 1-8
  joinedAt        DateTime @default(now())
  
  // Final results (populated when game ends)
  finalPosition   Int?
  flagsReached    Int?
  livesRemaining  Int?
  finalDamage     Int?
  robotsDestroyed Int?
  
  @@unique([gameId, userId])
  @@unique([gameId, startingDock])
  @@index([gameId])
  @@index([userId])
}

// =====================================================
// AUTHENTICATION MODELS (NextAuth)
// =====================================================

// NextAuth Account model for OAuth providers
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// NextAuth Verification tokens for passwordless auth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Password reset tokens
model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime
  
  createdAt DateTime @default(now())
  
  @@unique([email, token])
  @@index([email])
}